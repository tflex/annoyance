<?php

/**
 * Implementation of hook_permission().
 */
function annoyance_permission() {
  return array(
    'annoy users' => array(
      'title' => t('Settings to annoy users'),
      'description' => t('Allows management of Annoyance module.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function annoyance_menu() {
  $items = array();

  $items['admin/config/system/annoyance'] = array(
    'title' => 'ARE YOU ANNOYED?',
    'description' => t('Set options for the Annoyance module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_annoyance_options'),
    'access arguments' => array('annoy users'),
  );
  return($items);
}


function form_annoyance_options() {
  $outcome_options = array(
    1 => t('Just Die. Shows a white screen.'),
    2 => t('Display an error message (Can be set below).'),
    3 => t('Send user to URL (Can be set below).'),
    4 => t('Fade out all Paragraph text over the span of 30 seconds.'),
    5 => t('Disable certain form elements on the page.'),
    6 => t('Invert the color of all images on the page.'),
    7 => t('Disable all links and clickable items on the page.'),
    8 => t('Rotate page by a set amount (Degree can be set below).'),
    9 => t('Divitis.'),
    10 => t('Refresh page every so often (Refresh time can be set below).'),
    11 => t('Display an alert (Message can be set below).'),
  );

  $frequency_options = array(
    100 => t('Never'),
    95 => t('Very infrequently (5% of the time)'),
    90 => t('Every once in a while (10% of the time)'),
    75 => t('Annoyingly frequent (25% of the time)'),
    50 => t('Half of the time (50% of the time)'),
    35 => t('More often than not (65% of the time)'),
    25 => t('Almost always (75% of the time)'),
    10 => t('These users are going to be ANNOYED (90% of the time)'),
    0 => t('Always'),
  );

  $form['annoyance_uid'] = array(
    '#type' => 'textarea',
    '#title' => t('User ID(s)'),
    '#description' => t('Enter a list of User IDs to be affected, separated by commas. Enter 0 if you\'d like to affect anonymous users.'),
    '#size' => 22,
    '#default_value' => variable_get('annoyance_uid', ''),
    '#rows' => 5,
  );

  $form['annoyance_frequency'] = array(
    '#type' => 'select',
    '#title' => t('Frequency'),
    '#description' => t('How often should these users be affected with this sweet feature?'),
    '#options' => $frequency_options,
    '#default_value' => variable_get('annoyance_frequency', ''),
  );

  $form['annoyance_outcomes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select the annoying outcomes you\'d like to inflict on users.'),
    '#options' => $outcome_options,
    '#default_value' => variable_get('annoyance_outcomes', 0),
    '#description' => t('If the user is randomly selected to be targeted, they will be inflicted with one of these selected outcomes.'),
   );

  $form['annoyance_custom_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Customize Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['annoyance_custom_group']['annoyance_random_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Random URL'),
    '#description' => t('One option from above is to randomly send the user to a specific URL. Enter the URL here.'),
    '#size' => 80,
    '#default_value' => variable_get('annoyance_random_url', ''),
  );

  $form['annoyance_custom_group']['annoyance_random_error'] = array(
    '#type' => 'textfield',
    '#title' => t('Random error message'),
    '#description' => t('One option from above is to randomly display an error message. Enter the error message here.'),
    '#size' => 80,
    '#default_value' => variable_get('annoyance_random_error', ''),
  );

  $form['annoyance_custom_group']['annoyance_degree'] = array(
    '#type' => 'textfield',
    '#title' => t('Page refresh time limit'),
    '#description' => t('One of the options above is to rotate the page by a certain amount. Enter the amount (in degrees).'),
    '#size' => 10,
    '#field_suffix' => 'degrees',
    '#default_value' => variable_get('annoyance_degree', 1),
  );

  $form['annoyance_custom_group']['annoyance_refresh_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Page refresh time limit'),
    '#description' => t('One of the options above is to refresh the page after a certain amount of time. Enter the time (in seconds) how often you\'d like the page to refresh.'),
    '#size' => 10,
    '#field_suffix' => 'seconds',
    '#default_value' => variable_get('annoyance_refresh_time', 10),
  );

  $form['annoyance_custom_group']['annoyance_alert'] = array(
    '#type' => 'textfield',
    '#title' => t('Alert Message'),
    '#description' => t('One option from above is to randomly display an alert. Enter the alert message here.'),
    '#size' => 80,
    '#default_value' => variable_get('annoyance_alert', ''),
  );

  return system_settings_form($form);

}

/**
 * Implements hook_init().
 */
function annoyance_init() {

  // Get list of outcomes.
  $oa = variable_get('annoyance_outcomes', '');

  // Get list of affected users.
  $users = explode(",",variable_get('annoyance_uid', ''));

  // Get current logged in user.
  global $user;
  $current_user = $user->uid;

  // Only target the listed users.
  if(in_array($current_user, $users) && current_path() != "admin/config/system/annoyance") {

    // Check frequency and see if we should target user.
    $rn = (rand(1,100));
    if($rn > variable_get('annoyance_frequency', 100)) {

      //Generate a random outcome.
      $random_outcome=array_rand(array_filter($oa));

      // Apply random outcome.
      switch($random_outcome) {
      case 1:
        // Outcome 1 - just die.
        die;
        break;
      case 2:
        // Outcome 2 - display ambiguous error message.
        drupal_set_message(t(variable_get('annoyance_random_error', '')), 'error');
        break;
      case 3:
        // Outcome 3 - send user to Google.
        drupal_goto(variable_get('annoyance_random_url', ''));
        break;
      case 4:
        // Outcome 4 - Fade paragraph text over 30 seconds.
        drupal_add_js('jQuery(document).ready(function () { jQuery("p").fadeOut(30000); });', 'inline');
        break;
      case 5:
        // Outcome 5 - disable certain form elements.
        drupal_add_js('jQuery(document).ready(function () {jQuery("input").prop("disabled", true); });', 'inline');
        break;
      case 6:
        // Outcome 6 - invert colours of all images.
        drupal_add_css('img {filter: invert(100%);}', 'inline');
        break;
      case 7:
        // Outcome 7 - disable all links on page.
        drupal_add_css('body {pointer-events:none;}', 'inline');
        break;
      case 8:
        // Outcome 8 - rotate page by 1 degree.
        $degree = variable_get('annoyance_degree', 1);
        drupal_add_css('body {transform:rotate('.$degree.'deg);}', 'inline');
        break;
      case 9:
        // Outcome 9 - shifty divs.
        drupal_add_css('div>div:hover {transform: translateX(40px);}', 'inline');
        break;
      case 10:
        // Outcome 10 - Fade paragraph text over 30 seconds.
        $refresh = variable_get('annoyance_refresh_time', 10) * 1000;
        drupal_add_js('jQuery(document).ready(function () { setTimeout(function () { location.reload(1); }, '.$refresh.'); });', 'inline');
        break;
      case 11:
        // Outcome 11 - display an alert.
        drupal_add_js('jQuery(document).ready(function () {alert("'.variable_get('annoyance_alert', "").'"); });', 'inline');
        break;
      }
    }
  }
}
